{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Easily generate audio tone of a specific frequency and volume in Android.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#230-15-may-2025","title":"2.3.0 [15 May 2025]","text":"<ul> <li>\ud83d\udc1e Removed tick sound when playing.</li> <li>\ud83e\uddf9 Updated the sample app</li> <li>\ud83e\uddf0 Code cleanup, improvements and updated dependencies</li> </ul>"},{"location":"changelog/#220-13-jul-2022","title":"2.2.0 [13 Jul 2022]","text":"<ul> <li>\ud83e\uddf9 Improved versioned docs</li> <li>\u2795 Added <code>TriangleWaveGenerator</code></li> </ul>"},{"location":"changelog/#210-14-feb-2022","title":"2.1.0 [14 Feb 2022]","text":"<ul> <li>\ud83e\uddf9 Reworked API to allow providing custom Wave Generator</li> <li>\u2795 Added <code>SquareWaveGenerator</code></li> </ul>"},{"location":"changelog/#200-14-feb-2022","title":"2.0.0 [14 Feb 2022]","text":"<ul> <li>\u2705 Switched to Kotlin</li> <li>\ud83d\udc40 Uses coroutines</li> <li> <p>\ud83e\uddf9 Reworked API</p> </li> <li> <p>\u26a0\ufe0f <code>ZenTone</code>is no more a singleton thus allowing running multiple instances of it.</p> </li> <li>\u26a0\ufe0f <code>minSdk</code> = 18</li> <li>\u274c Time duration cannot be set anymore. This is now dependent on when one calls <code>stop</code> on <code>ZenTone</code> instance.</li> </ul>"},{"location":"changelog/#103-01-aug-2016","title":"1.0.3 [01 Aug 2016]","text":"<ul> <li>\u2705 Updated code to handle volume</li> <li>\ud83e\uddf9 Replace maven-push.gradle file with the one from github repo</li> <li>\ud83d\udcc3 Added Java Docs</li> <li>\ud83e\uddf0 Code cleanup and updated dependencies</li> </ul>"},{"location":"integration/","title":"Integration","text":""},{"location":"integration/#including-in-your-project","title":"Including in your project","text":"<p>ZenTone is available in the MavenCentral, so getting it as simple as adding it as a dependency inside your build.gradle file</p> <pre><code>implementation \"com.github.nisrulz:zentone:$version\"\n</code></pre> <p>where <code>$version</code> corresponds to latest version published in </p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-an-instance-of-zentone","title":"Create an instance of <code>ZenTone</code>:","text":"<pre><code>val zenTone = ZenTone()\n</code></pre> <p><code>ZenTone</code> accepts 3 arguments, each having a sensible default:</p> <ol> <li><code>sampleRate</code>: Int = 44100</li> <li><code>encoding</code>: Int = AudioFormat.ENCODING_PCM_16BIT</li> <li><code>channelMask</code>: Int = AudioFormat.CHANNEL_OUT_MONO</li> </ol> <p>based on your requirement, you can pass a different value when instantiating <code>ZenTone</code> i.e</p> <pre><code>val zenTone = ZenTone(channelMask = AudioFormat.CHANNEL_OUT_STEREO)\n</code></pre>"},{"location":"usage/#start-playing-audio-with-a-frequency-and-volume","title":"Start playing audio with a frequency and volume:","text":"<pre><code>zenTone.play(frequency = 400f, volume = 2)\n</code></pre> <p><code>play()</code> accepts 3 arguments:</p> <ol> <li><code>frequency</code>: Float</li> <li><code>volume</code>: Int. It ranges from 0 to 100, where 0 is no audio and 100 is full volume.</li> <li><code>waveByteArrayGenerator</code>: WaveByteArrayGenerator = SineWaveGenerator, here <code>SineWaveGenerator</code> is a sensible default.</li> <li>POssible options are <code>SineWaveGenerator</code>, <code>SquareWaveGenerator</code> and <code>TriangleWaveGenerator</code></li> </ol> <p>based on your requirement, you can pass a different value when calling <code>play()</code> i.e</p> <pre><code>zenTone.play(frequency = 440f,\n            volume = 10,\n            waveByteArrayGenerator = SquareWaveGenerator)\n</code></pre>"},{"location":"usage/#stop-playing-audio","title":"Stop playing audio:","text":"<pre><code>zenTone.stop()\n</code></pre> <p>To release resources held by <code>ZenTone</code> i.e release mic, you can call <code>release()</code> function.</p> <p>Usually you'll need to call this in <code>onDestroy()</code>:</p> <pre><code>override fun onDestroy() {\n    super.onDestroy()\n    zenTone.release()\n}\n</code></pre>"},{"location":"usage/#check-if-zentone-is-playing-audio-by-querying-the-isplaying-flag","title":"Check if <code>ZenTone</code> is playing audio by querying the <code>isPlaying</code> flag:","text":"<pre><code>val isPlaying = zenTone.isPlaying\n</code></pre>"},{"location":"usage/#toggle-playback","title":"Toggle playback","text":"<pre><code>zenTone.togglePlayback(frequency = 440f, volume = 10)\n</code></pre> <p><code>togglePlayback()</code> accepts 3 arguments:</p> <ol> <li><code>frequency</code>: Float</li> <li><code>volume</code>: Int. It ranges from 0 to 100, where 0 is no audio and 100 is full volume.</li> </ol>"}]}